{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/utils.ts",".././src/errorHandler.ts",".././src/parser.ts","../external \"prettier\"","../external \"path\"",".././src/main.ts",".././src/ignoreFileHandler.ts","../external \"fs\"","../external \"ignore\"",".././src/prettierConfigFileWatcher.ts",".././src/PrettierEditProvider.ts","../external \"child_process\"","../external \"util\"",".././src/integration.ts","../external \"prettier-eslint\"","../external \"prettier-tslint\"","../external \"prettier-stylelint\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","uri","vscode","workspace","getConfiguration","statusBarItem","window","createStatusBarItem","StatusBarAlignment","Right","text","command","toggleStatusBar","activeTextEditor","outputChannel","createOutputChannel","prettierInformation","editor","hide","textDocumentEditorPart","document","scheme","disableLanguages","getVSCodeConfig","languages","match","allVSCodeLanguageIds","includes","languageId","show","updateStatusBar","message","tooltip","logMessage","filename","title","Date","toLocaleString","appendLine","repeat","length","version","cb","defaultText","Promise","then","returnValue","catch","err","errorHandlerDisposables","onDidChangeActiveTextEditor","commands","registerCommand","prettierLanguages","getSupportInfo","VSCodePluginLanguageIds","VSCodeLanguageParsers","mongo","javascript","javascriptreact","typescript","typescriptreact","json","jsonc","json5","postcss","css","less","scss","graphql","markdown","mdx","html","vue","yaml","php","jade","ruby","swift","xml","filepath","getParserByLangId","supportedLanguage","allLanguagesFromPrettier","basename","path","extname","filenamesAndExtensionsEmptyParser","lang","filenames","parsers","extensions","forEach","vscodeLanguageIds","push","vscodeLangId","formatterHandler","disposeFormatterHandler","dispose","undefined","async","context","fileIsIgnored","ignoreFileHandler","subscriptions","prettierEditProvider","PrettierEditProvider","registerFormatter","languageSelector","globalLanguageSelector","workspaceFolders","untitledLanguageSelector","fileLanguageSelector","language","formatterSelector","registerDocumentFormattingEditProvider","onDidChangeWorkspaceFolders","prettierConfigFileWatcher","nullIgnorer","ignores","isFileExists","fs","promises","stat","code","disposables","ignorers","unloadIgnorer","ignoreUri","fsPath","loadIgnorer","ignorer","fileWatcher","createFileSystemWatcher","onDidCreate","onDidChange","onDidDelete","ignoreFileContents","readFile","add","getIgnorerForFile","ignorePath","Uri","file","absolutePath","filePath","folder","getWorkspaceFolder","relativeTo","isAbsolute","join","getPath","getIgnorePathForFile","ignoreFilePath","relative","dirname","prettier","clearConfigCache","this","_fileIsIgnored","_provideEdits","fileName","isUntitled","vscodeConfig","workspaceFolderPaths","wf","_cachedGlobalNodeModulesPaths","_globalNodeModulesPaths","globalPath","configOptions","parser","getParserByLangIdAndFilename","hasConfig","requireConfig","config","error","_resolvePrettierConfig","editorconfig","prettierOptions","_mergeConfig","printWidth","tabWidth","singleQuote","trailingComma","bracketSpacing","jsxBracketSameLine","semi","useTabs","proseWrap","arrowParens","jsxSingleQuote","htmlWhitespaceSensitivity","vueIndentScriptAndStyle","endOfLine","quoteProps","pluginSearchDirs","sendToOutput","setUsedModule","tslintIntegration","tslintLanguageIds","safeExecution","prettierTslintFormat","fallbackPrettierOptions","eslintIntegration","eslintLanguageIds","prettierEslintFormat","stylelintIntegration","stylelintLanguageIds","prettierStylelintFormat","format","promisifiedExec","promisify","childProcess","exec","executeCommand","cmd","nodeModulesPath","stdout","trim","endsWith","replace","all","options","resolveConfig","hasPrettierConfig","prettierConfig","lastLineId","lineCount","Range","lineAt","formattedText","_format","getText","TextEdit","_fullDocumentRange","prettierESLint","prettierTSLint","prettierStylelint"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = require(\"vscode\");","import * as prettier from \"prettier\";\nimport * as vscode from \"vscode\";\n\nexport function getVSCodeConfig(\n\turi?: vscode.Uri\n): prettier.PrettierVSCodeConfig {\n\treturn vscode.workspace.getConfiguration(\"prettier\", uri) as any;\n}\n","import * as vscode from \"vscode\";\nimport { allVSCodeLanguageIds } from \"./parser\";\nimport { getVSCodeConfig } from \"./utils\";\n\ntype EditorPart = \"debug\" | \"output\";\n\nconst statusBarItem = vscode.window.createStatusBarItem(\n\tvscode.StatusBarAlignment.Right,\n\t-1\n);\nstatusBarItem.text = \"Prettier+\";\nstatusBarItem.command = \"prettier-plus.open-output\";\ntoggleStatusBar(vscode.window.activeTextEditor);\n\nconst outputChannel = vscode.window.createOutputChannel(\"Prettier+\");\nlet prettierInformation: string | undefined;\n\nfunction toggleStatusBar(editor: vscode.TextEditor | undefined) {\n\tif (!editor) {\n\t\tstatusBarItem.hide();\n\t\treturn;\n\t}\n\n\t// The function will be triggered everytime the active \"editor\" instance changes.\n\t// It also triggers when we focus on the output panel or on the debug panel.\n\t// Both are seen as an \"editor\".\n\t// The following check will ignore such panels.\n\tconst textDocumentEditorPart = editor.document.uri.scheme as EditorPart;\n\tif (\n\t\ttextDocumentEditorPart === \"debug\" ||\n\t\ttextDocumentEditorPart === \"output\"\n\t) {\n\t\treturn;\n\t}\n\n\tconst { disableLanguages } = getVSCodeConfig(editor.document.uri);\n\tconst score = vscode.languages.match(allVSCodeLanguageIds, editor.document);\n\n\tif (score > 0 && !disableLanguages.includes(editor.document.languageId)) {\n\t\tstatusBarItem.show();\n\t} else {\n\t\tstatusBarItem.hide();\n\t}\n}\n\nfunction updateStatusBar(message: string) {\n\tstatusBarItem.text = message;\n\tstatusBarItem.tooltip = prettierInformation;\n\tstatusBarItem.show();\n}\n\nexport function setUsedModule(module: string, version: string) {\n\tprettierInformation = `${module}@${version}`;\n}\n\n/**\n * Append messages to the output channel and format it with a title.\n */\nexport function logMessage(message: string, filename?: string) {\n\tlet title: string;\n\tif (filename) {\n\t\ttitle = `${filename} (${new Date().toLocaleString()}):`;\n\t} else {\n\t\ttitle = `${new Date().toLocaleString()}:`;\n\t}\n\n\t// Create a sort of title, to differentiate between messages\n\toutputChannel.appendLine(title);\n\toutputChannel.appendLine(\"-\".repeat(title.length));\n\n\t// Append actual output.\n\toutputChannel.appendLine(`${message}\\n`);\n}\n\n/**\n * Execute a callback safely, if it doesn't work, return default and log messages.\n * @param cb The function to be executed.\n * @param defaultText The default value if execution of the callback failed.\n * @param filename The filename of the current document.\n * @returns formatted text or default text.\n */\nexport function safeExecution(\n\tcb: (() => string) | Promise<string>,\n\tdefaultText: string,\n\tfilename: string\n): string | Promise<string> {\n\tif (cb instanceof Promise) {\n\t\treturn cb\n\t\t\t.then((returnValue) => {\n\t\t\t\tupdateStatusBar(\"Prettier+: $(check)\");\n\t\t\t\treturn returnValue;\n\t\t\t})\n\t\t\t.catch((err: Error) => {\n\t\t\t\tlogMessage(err.message, filename);\n\t\t\t\tupdateStatusBar(\"Prettier+: $(x)\");\n\t\t\t\treturn defaultText;\n\t\t\t});\n\t}\n\n\ttry {\n\t\tconst returnValue = cb();\n\t\tupdateStatusBar(\"Prettier+: $(check)\");\n\t\treturn returnValue;\n\t} catch (err) {\n\t\tlogMessage(err.message, filename);\n\t\tupdateStatusBar(\"Prettier+: $(x)\");\n\t\treturn defaultText;\n\t}\n}\n\nexport const errorHandlerDisposables: vscode.Disposable[] = [\n\tvscode.window.onDidChangeActiveTextEditor((editor) =>\n\t\ttoggleStatusBar(editor)\n\t),\n\tvscode.commands.registerCommand(\"prettier-plus.open-output\", () =>\n\t\toutputChannel.show()\n\t),\n];\n","import * as path from \"path\";\nimport * as prettier from \"prettier\";\n\ninterface LanguagesFromPrettier {\n\t[VSCodeLanguageId: string]: {\n\t\tfilenames: string[];\n\t\textensions: string[];\n\t\tparsers: prettier.ParserOption[];\n\t}[];\n}\n\nconst prettierLanguages = prettier.getSupportInfo().languages;\nexport const VSCodePluginLanguageIds = [\"php\", \"jade\", \"ruby\", \"swift\", \"xml\"];\nconst VSCodeLanguageParsers: {\n\t[parser: string]: prettier.AllParsers[];\n} = {\n\t// Prettier\n\tmongo: [\"babel\", \"flow\"],\n\tjavascript: [\"babel\", \"flow\"],\n\tjavascriptreact: [\"babel\", \"flow\"],\n\ttypescript: [\"typescript\", \"babel-ts\"],\n\ttypescriptreact: [\"typescript\", \"babel-ts\"],\n\tjson: [\"json\"],\n\tjsonc: [\"json\"],\n\tjson5: [\"json5\"],\n\tpostcss: [\"css\"],\n\tcss: [\"css\"],\n\tless: [\"less\"],\n\tscss: [\"scss\"],\n\tgraphql: [\"graphql\"],\n\tmarkdown: [\"markdown\"],\n\tmdx: [\"mdx\"],\n\thtml: [\"html\"],\n\tvue: [\"vue\"],\n\tyaml: [\"yaml\"],\n\t// Plugins\n\tphp: [\"php\"],\n\tjade: [\"pug\"],\n\truby: [\"ruby\"],\n\tswift: [\"swift\"],\n\txml: [\"xml\"],\n};\n\nexport function getParserByLangIdAndFilename(\n\tlanguageId: string,\n\tfilepath?: string\n): prettier.AllParsers {\n\tif (!filepath) {\n\t\treturn getParserByLangId(languageId);\n\t}\n\n\tconst supportedLanguage = allLanguagesFromPrettier[languageId];\n\tif (!supportedLanguage) {\n\t\treturn getParserByLangId(languageId);\n\t}\n\n\tconst basename = path.basename(filepath);\n\tconst extname = path.extname(filepath);\n\tlet filenamesAndExtensionsEmptyParser: prettier.ParserOption = \"\";\n\n\tfor (const lang of supportedLanguage) {\n\t\tif (lang.filenames.includes(basename)) {\n\t\t\treturn lang.parsers[0];\n\t\t}\n\t\tif (lang.extensions.includes(extname)) {\n\t\t\treturn lang.parsers[0];\n\t\t}\n\t\tif (lang.filenames.length === 0 && lang.extensions.length === 0) {\n\t\t\tfilenamesAndExtensionsEmptyParser = lang.parsers[0];\n\t\t}\n\t}\n\n\tif (filenamesAndExtensionsEmptyParser) {\n\t\treturn filenamesAndExtensionsEmptyParser;\n\t}\n\n\treturn getParserByLangId(languageId);\n}\n\nexport const allVSCodeLanguageIds: string[] = [...VSCodePluginLanguageIds];\nconst allLanguagesFromPrettier: LanguagesFromPrettier = {};\n\nprettierLanguages.forEach((lang) => {\n\tconst {\n\t\tfilenames = [],\n\t\textensions = [],\n\t\tparsers = [],\n\t\tvscodeLanguageIds = [],\n\t} = lang;\n\n\tif (vscodeLanguageIds.length > 0) {\n\t\tallVSCodeLanguageIds.push(...vscodeLanguageIds);\n\t}\n\n\tvscodeLanguageIds.forEach((vscodeLangId) => {\n\t\tif (allLanguagesFromPrettier[vscodeLangId]) {\n\t\t\tallLanguagesFromPrettier[vscodeLangId].push({\n\t\t\t\tfilenames,\n\t\t\t\textensions,\n\t\t\t\tparsers,\n\t\t\t});\n\t\t} else {\n\t\t\tallLanguagesFromPrettier[vscodeLangId] = [\n\t\t\t\t{ filenames, extensions, parsers },\n\t\t\t];\n\t\t}\n\t});\n});\n\nfunction getParserByLangId(languageId: string): prettier.AllParsers {\n\tconst parsers = VSCodeLanguageParsers[languageId];\n\treturn parsers?.[0] ?? \"\";\n}\n","module.exports = require(\"prettier\");","module.exports = require(\"path\");","import * as vscode from \"vscode\";\nimport { errorHandlerDisposables } from \"./errorHandler\";\nimport { ignoreFileHandler } from \"./ignoreFileHandler\";\nimport { allVSCodeLanguageIds } from \"./parser\";\nimport { prettierConfigFileWatcher } from \"./prettierConfigFileWatcher\";\nimport { PrettierEditProvider } from \"./PrettierEditProvider\";\nimport { getVSCodeConfig } from \"./utils\";\n\nlet formatterHandler: vscode.Disposable | undefined;\n\nfunction disposeFormatterHandler() {\n\tformatterHandler?.dispose();\n\tformatterHandler = undefined;\n}\n\nfunction formatterSelector(): string[] | vscode.DocumentFilter[] {\n\tconst { disableLanguages } = getVSCodeConfig();\n\tlet globalLanguageSelector: string[] = [];\n\n\tif (disableLanguages.length !== 0) {\n\t\tfor (const lang of allVSCodeLanguageIds) {\n\t\t\tif (!disableLanguages.includes(lang)) {\n\t\t\t\tglobalLanguageSelector.push(lang);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tglobalLanguageSelector = allVSCodeLanguageIds;\n\t}\n\n\t// No workspace opened.\n\tif (!vscode.workspace.workspaceFolders) {\n\t\treturn globalLanguageSelector;\n\t}\n\n\tconst specialLanguageSelector: vscode.DocumentFilter[] = [\n\t\t{ language: \"jsonc\", scheme: \"vscode-userdata\" },\n\t];\n\tconst untitledLanguageSelector: vscode.DocumentFilter[] = [];\n\tconst fileLanguageSelector: vscode.DocumentFilter[] = [];\n\tfor (const lang of globalLanguageSelector) {\n\t\tuntitledLanguageSelector.push({ language: lang, scheme: \"untitled\" });\n\t\tfileLanguageSelector.push({ language: lang, scheme: \"file\" });\n\t}\n\n\treturn [\n\t\t...untitledLanguageSelector,\n\t\t...fileLanguageSelector,\n\t\t...specialLanguageSelector,\n\t];\n}\n\nexport async function activate(context: vscode.ExtensionContext) {\n\tconst { fileIsIgnored } = ignoreFileHandler(context.subscriptions);\n\tconst prettierEditProvider = new PrettierEditProvider(fileIsIgnored);\n\n\tconst registerFormatter = () => {\n\t\tdisposeFormatterHandler();\n\n\t\tconst languageSelector = formatterSelector();\n\t\tformatterHandler = vscode.languages.registerDocumentFormattingEditProvider(\n\t\t\tlanguageSelector,\n\t\t\tprettierEditProvider\n\t\t);\n\t};\n\n\tregisterFormatter();\n\n\tcontext.subscriptions.push(\n\t\tvscode.workspace.onDidChangeWorkspaceFolders(registerFormatter),\n\t\t{ dispose: disposeFormatterHandler },\n\t\tprettierConfigFileWatcher,\n\t\t...errorHandlerDisposables\n\t);\n}\n","import * as fs from \"fs\";\nimport ignore from \"ignore\";\nimport * as path from \"path\";\nimport * as vscode from \"vscode\";\nimport { logMessage } from \"./errorHandler\";\nimport { getVSCodeConfig } from \"./utils\";\n\ninterface Ignorer {\n\tignores(filePath: string): boolean;\n}\n\nconst nullIgnorer: Ignorer = { ignores: () => false };\n\n/**\n * Create an ignore file handler. Will lazily read ignore files on a per-resource\n * basis, and cache the contents until it changes.\n */\nexport function ignoreFileHandler(disposables: vscode.Disposable[]) {\n\tlet ignorers: { [key: string]: Ignorer } = {};\n\tdisposables.push({ dispose: () => (ignorers = {}) });\n\n\tconst unloadIgnorer = (ignoreUri: vscode.Uri) => {\n\t\tignorers[ignoreUri.fsPath] = nullIgnorer;\n\t};\n\n\tconst loadIgnorer = async (ignoreUri: vscode.Uri) => {\n\t\tlet ignorer = nullIgnorer;\n\n\t\tif (!ignorers[ignoreUri.fsPath]) {\n\t\t\tconst fileWatcher = vscode.workspace.createFileSystemWatcher(\n\t\t\t\tignoreUri.fsPath\n\t\t\t);\n\t\t\tdisposables.push(fileWatcher);\n\t\t\tfileWatcher.onDidCreate(loadIgnorer, null, disposables);\n\t\t\tfileWatcher.onDidChange(loadIgnorer, null, disposables);\n\t\t\tfileWatcher.onDidDelete(unloadIgnorer, null, disposables);\n\t\t}\n\n\t\tif (await isFileExists(ignoreUri.fsPath)) {\n\t\t\tconst ignoreFileContents = await fs.promises.readFile(\n\t\t\t\tignoreUri.fsPath,\n\t\t\t\t\"utf-8\"\n\t\t\t);\n\t\t\tignorer = ignore().add(ignoreFileContents);\n\t\t}\n\n\t\tignorers[ignoreUri.fsPath] = ignorer;\n\t};\n\n\tconst getIgnorerForFile = async (\n\t\tfsPath: string\n\t): Promise<{ ignorer: Ignorer; ignoreFilePath: string }> => {\n\t\tconst { ignorePath } = getVSCodeConfig(vscode.Uri.file(fsPath));\n\t\tconst absolutePath = getIgnorePathForFile(fsPath, ignorePath);\n\n\t\tif (!absolutePath) {\n\t\t\treturn { ignoreFilePath: \"\", ignorer: nullIgnorer };\n\t\t}\n\n\t\tif (!ignorers[absolutePath]) {\n\t\t\tawait loadIgnorer(vscode.Uri.file(absolutePath));\n\t\t}\n\n\t\tif (await !isFileExists(absolutePath)) {\n\t\t\t// Don't log default value.\n\t\t\tif (ignorePath !== \".prettierignore\") {\n\t\t\t\tlogMessage(\n\t\t\t\t\t`Invalid \"prettier.ignorePath\" in your settings. The path ${ignorePath} doesn't exist.`,\n\t\t\t\t\tfsPath\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { ignoreFilePath: \"\", ignorer: nullIgnorer };\n\t\t}\n\n\t\treturn {\n\t\t\tignoreFilePath: absolutePath,\n\t\t\tignorer: ignorers[absolutePath],\n\t\t};\n\t};\n\n\treturn {\n\t\tfileIsIgnored: async (filePath: string) => {\n\t\t\tconst { ignorer, ignoreFilePath } = await getIgnorerForFile(filePath);\n\t\t\treturn ignorer.ignores(\n\t\t\t\tpath.relative(path.dirname(ignoreFilePath), filePath)\n\t\t\t);\n\t\t},\n\t};\n}\n\nfunction getIgnorePathForFile(\n\tfilePath: string,\n\tignorePath: string\n): string | undefined {\n\t// Configuration `prettier.ignorePath` is set to `null`.\n\tif (!ignorePath) {\n\t\treturn;\n\t}\n\n\tif (vscode.workspace.workspaceFolders) {\n\t\tconst folder = vscode.workspace.getWorkspaceFolder(\n\t\t\tvscode.Uri.file(filePath)\n\t\t);\n\t\tif (folder) {\n\t\t\treturn getPath(ignorePath, folder.uri.fsPath);\n\t\t}\n\t}\n}\n\nfunction getPath(fsPath: string, relativeTo: string) {\n\treturn path.isAbsolute(fsPath) ? fsPath : path.join(relativeTo, fsPath);\n}\n\nasync function isFileExists(path: string): Promise<boolean> {\n\ttry {\n\t\tawait fs.promises.stat(path);\n\t\treturn true;\n\t} catch (err) {\n\t\tif (err.code === \"ENOENT\") {\n\t\t\treturn false;\n\t\t}\n\t\tthrow err;\n\t}\n}\n","module.exports = require(\"fs\");","module.exports = require(\"ignore\");","import * as prettier from \"prettier\";\nimport * as vscode from \"vscode\";\n\nconst prettierConfigFiles = [\n\t\".prettierrc\",\n\t\".prettierrc.json\",\n\t\".prettierrc.yaml\",\n\t\".prettierrc.yml\",\n\t\".prettierrc.js\",\n\t\"package.json\",\n\t\"prettier.config.js\",\n\t\".editorconfig\",\n];\n\n// Create a file watcher. Clears prettier's configuration cache on file change, create, delete.\nexport const prettierConfigFileWatcher = vscode.workspace.createFileSystemWatcher(\n\t`**/{${prettierConfigFiles.join(\",\")}}`\n);\nprettierConfigFileWatcher.onDidChange(prettier.clearConfigCache);\nprettierConfigFileWatcher.onDidCreate(prettier.clearConfigCache);\nprettierConfigFileWatcher.onDidDelete(prettier.clearConfigCache);\n","import * as childProcess from \"child_process\";\nimport * as prettier from \"prettier\";\nimport { promisify } from \"util\";\nimport * as vscode from \"vscode\";\nimport { logMessage, safeExecution, setUsedModule } from \"./errorHandler\";\nimport {\n\teslintLanguageIds,\n\tprettierEslintFormat,\n\tprettierStylelintFormat,\n\tprettierTslintFormat,\n\tstylelintLanguageIds,\n\ttslintLanguageIds,\n} from \"./integration\";\nimport {\n\tgetParserByLangIdAndFilename,\n\tVSCodePluginLanguageIds,\n} from \"./parser\";\nimport { getVSCodeConfig } from \"./utils\";\n\nexport class PrettierEditProvider\n\timplements vscode.DocumentFormattingEditProvider {\n\tprivate _cachedGlobalNodeModulesPaths?: (string | undefined)[];\n\tprivate readonly _fileIsIgnored: (filePath: string) => Promise<boolean>;\n\n\tconstructor(fileIsIgnored: (filePath: string) => Promise<boolean>) {\n\t\tthis._fileIsIgnored = fileIsIgnored;\n\t}\n\n\tprovideDocumentFormattingEdits(\n\t\tdocument: vscode.TextDocument\n\t): Promise<vscode.TextEdit[]> {\n\t\treturn this._provideEdits(document);\n\t}\n\n\t/**\n\t * Format the given text with user's configuration.\n\t * @param text text to format.\n\t * @param path formatting file's path.\n\t * @returns formatted text.\n\t */\n\tprivate async _format(\n\t\ttext: string,\n\t\t{ fileName, languageId, uri, isUntitled }: vscode.TextDocument\n\t): Promise<string> {\n\t\tconst vscodeConfig: prettier.PrettierVSCodeConfig = getVSCodeConfig(uri);\n\t\tconst workspaceFolderPaths: string[] = [];\n\n\t\t// This has to stay, as it allows to skip in sub workspaceFolders. Sadly noop.\n\t\t// wf1  (with \"lang\") -> glob: \"wf1/**\"\n\t\t// wf1/wf2  (without \"lang\") -> match \"wf1/**\"\n\t\tif (vscodeConfig.disableLanguages.includes(languageId)) {\n\t\t\treturn text;\n\t\t}\n\n\t\tif (VSCodePluginLanguageIds.includes(languageId)) {\n\t\t\tvscode.workspace.workspaceFolders?.forEach((wf) => {\n\t\t\t\tworkspaceFolderPaths.push(wf.uri.fsPath);\n\t\t\t});\n\n\t\t\tif (!this._cachedGlobalNodeModulesPaths) {\n\t\t\t\tthis._cachedGlobalNodeModulesPaths = await this._globalNodeModulesPaths();\n\t\t\t}\n\t\t\tthis._cachedGlobalNodeModulesPaths.forEach((globalPath) => {\n\t\t\t\tglobalPath && workspaceFolderPaths.push(globalPath);\n\t\t\t});\n\t\t}\n\n\t\tlet parser: prettier.AllParsers = vscodeConfig.parser;\n\t\tif (parser === \"\") {\n\t\t\tparser = getParserByLangIdAndFilename(\n\t\t\t\tlanguageId,\n\t\t\t\tisUntitled ? undefined : fileName\n\t\t\t);\n\t\t}\n\n\t\tlet configOptions: prettier.PrettierConfig | undefined;\n\t\tlet hasConfig = false;\n\t\tif (vscodeConfig.requireConfig) {\n\t\t\tconst { config, error } = await this._resolvePrettierConfig(fileName, {\n\t\t\t\teditorconfig: true,\n\t\t\t});\n\t\t\tif (error != null) {\n\t\t\t\tlogMessage(\n\t\t\t\t\t`Failed to resolve config for ${fileName}. Falling back to the default settings.`\n\t\t\t\t);\n\t\t\t} else if (config == null) {\n\t\t\t\tlogMessage(\n\t\t\t\t\t`Prettier config is empty. Falling back to the default settings.`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconfigOptions = config;\n\t\t\t\thasConfig = true;\n\t\t\t}\n\t\t}\n\n\t\tconst prettierOptions = this._mergeConfig(hasConfig, configOptions || {}, {\n\t\t\tprintWidth: vscodeConfig.printWidth,\n\t\t\ttabWidth: vscodeConfig.tabWidth,\n\t\t\tsingleQuote: vscodeConfig.singleQuote,\n\t\t\ttrailingComma: vscodeConfig.trailingComma,\n\t\t\tbracketSpacing: vscodeConfig.bracketSpacing,\n\t\t\tjsxBracketSameLine: vscodeConfig.jsxBracketSameLine,\n\t\t\tsemi: vscodeConfig.semi,\n\t\t\tuseTabs: vscodeConfig.useTabs,\n\t\t\tproseWrap: vscodeConfig.proseWrap,\n\t\t\tarrowParens: vscodeConfig.arrowParens,\n\t\t\tjsxSingleQuote: vscodeConfig.jsxSingleQuote,\n\t\t\thtmlWhitespaceSensitivity: vscodeConfig.htmlWhitespaceSensitivity,\n\t\t\tvueIndentScriptAndStyle: vscodeConfig.vueIndentScriptAndStyle,\n\t\t\tendOfLine: vscodeConfig.endOfLine,\n\t\t\tquoteProps: vscodeConfig.quoteProps,\n\t\t\tfilepath: fileName,\n\t\t\tpluginSearchDirs: workspaceFolderPaths,\n\t\t\tparser,\n\t\t});\n\n\t\tconst sendToOutput = (name: string, version: string) => {\n\t\t\tlogMessage(\n\t\t\t\t`Using ${name}@${version}${\n\t\t\t\t\thasConfig ? \" with Prettier config\" : \"\"\n\t\t\t\t} to format code with ${parser} parser for ${languageId} language.`,\n\t\t\t\tfileName\n\t\t\t);\n\t\t\tsetUsedModule(name, version);\n\t\t};\n\n\t\tif (\n\t\t\tvscodeConfig.tslintIntegration &&\n\t\t\ttslintLanguageIds.includes(languageId)\n\t\t) {\n\t\t\treturn safeExecution(\n\t\t\t\t() => {\n\t\t\t\t\tsendToOutput(\"prettier-tslint\", \"0.4.2\");\n\t\t\t\t\treturn prettierTslintFormat()({\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tfilePath: fileName,\n\t\t\t\t\t\tfallbackPrettierOptions: prettierOptions,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\ttext,\n\t\t\t\tfileName\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tvscodeConfig.eslintIntegration &&\n\t\t\teslintLanguageIds.includes(languageId)\n\t\t) {\n\t\t\treturn safeExecution(\n\t\t\t\t() => {\n\t\t\t\t\tsendToOutput(\"prettier-eslint\", \"11.0.0\");\n\t\t\t\t\treturn prettierEslintFormat()({\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tfilePath: fileName,\n\t\t\t\t\t\tfallbackPrettierOptions: prettierOptions,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\ttext,\n\t\t\t\tfileName\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tvscodeConfig.stylelintIntegration &&\n\t\t\tstylelintLanguageIds.includes(languageId)\n\t\t) {\n\t\t\tsendToOutput(\"prettier-stylelint\", \"0.4.2\");\n\t\t\treturn safeExecution(\n\t\t\t\tprettierStylelintFormat()({\n\t\t\t\t\ttext,\n\t\t\t\t\tfilePath: fileName,\n\t\t\t\t\tprettierOptions,\n\t\t\t\t}),\n\t\t\t\ttext,\n\t\t\t\tfileName\n\t\t\t);\n\t\t}\n\n\t\treturn safeExecution(\n\t\t\t() => {\n\t\t\t\tsendToOutput(\"prettier\", prettier.version);\n\t\t\t\treturn prettier.format(text, prettierOptions);\n\t\t\t},\n\t\t\ttext,\n\t\t\tfileName\n\t\t);\n\t}\n\n\tprivate async _globalNodeModulesPaths(): Promise<(string | undefined)[]> {\n\t\tconst promisifiedExec = promisify(childProcess.exec);\n\t\tconst executeCommand = async (cmd: string): Promise<string | undefined> => {\n\t\t\ttry {\n\t\t\t\tlet nodeModulesPath = (await promisifiedExec(cmd)).stdout.trim();\n\t\t\t\tif (nodeModulesPath.endsWith(\"node_modules\")) {\n\t\t\t\t\tnodeModulesPath = nodeModulesPath.replace(\"node_modules\", \"\");\n\t\t\t\t}\n\t\t\t\treturn nodeModulesPath;\n\t\t\t} catch {}\n\t\t};\n\n\t\treturn Promise.all([\n\t\t\texecuteCommand(\"yarn global dir\"),\n\t\t\texecuteCommand(\"npm -g root\"),\n\t\t]);\n\t}\n\n\t/**\n\t * Resolves the prettier config for the given file.\n\t * @param filePath file's path.\n\t */\n\tprivate async _resolvePrettierConfig(\n\t\tfilePath: string,\n\t\toptions?: { editorconfig?: boolean }\n\t): Promise<{ config?: prettier.PrettierConfig; error: Error | null }> {\n\t\ttry {\n\t\t\tconst config = await prettier.resolveConfig(filePath, options);\n\t\t\treturn { config, error: null };\n\t\t} catch (error) {\n\t\t\treturn { error };\n\t\t}\n\t}\n\n\t/**\n\t * Define which config should be used.\n\t * @param hasPrettierConfig a prettier config exists.\n\t * @param prettierConfig config from prettier's config file.\n\t * @param vscodeConfig vscode config.\n\t */\n\tprivate _mergeConfig(\n\t\thasPrettierConfig: boolean,\n\t\tprettierConfig: Partial<prettier.PrettierConfig>,\n\t\tvscodeConfig: Partial<prettier.PrettierConfig>\n\t) {\n\t\tif (hasPrettierConfig) {\n\t\t\t// Always merge our inferred parser in.\n\t\t\treturn { parser: vscodeConfig.parser, ...prettierConfig };\n\t\t}\n\t\treturn { ...vscodeConfig, ...prettierConfig };\n\t}\n\n\tprivate _fullDocumentRange(document: vscode.TextDocument): vscode.Range {\n\t\tconst lastLineId = document.lineCount - 1;\n\t\treturn new vscode.Range(\n\t\t\t0,\n\t\t\t0,\n\t\t\tlastLineId,\n\t\t\tdocument.lineAt(lastLineId).text.length\n\t\t);\n\t}\n\n\tprivate async _provideEdits(\n\t\tdocument: vscode.TextDocument\n\t): Promise<vscode.TextEdit[]> {\n\t\tif (\n\t\t\t!document.isUntitled &&\n\t\t\t(await this._fileIsIgnored(document.fileName))\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst formattedText = await this._format(document.getText(), document);\n\t\treturn [\n\t\t\tvscode.TextEdit.replace(this._fullDocumentRange(document), formattedText),\n\t\t];\n\t}\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"util\");","export const eslintLanguageIds = [\n\t\"javascript\",\n\t\"javascriptreact\",\n\t\"typescript\",\n\t\"typescriptreact\",\n\t\"vue\",\n];\nexport const tslintLanguageIds = [\"typescript\", \"typescriptreact\"];\nexport const stylelintLanguageIds = [\"css\", \"less\", \"scss\"];\n\nlet prettierESLint: typeof import(\"prettier-eslint\");\nexport function prettierEslintFormat(): typeof import(\"prettier-eslint\") {\n\tif (!prettierESLint) {\n\t\tprettierESLint = require(\"prettier-eslint\");\n\t}\n\treturn prettierESLint;\n}\n\nlet prettierTSLint: typeof import(\"prettier-tslint\");\nexport function prettierTslintFormat(): typeof import(\"prettier-tslint\").format {\n\tif (!prettierTSLint) {\n\t\tprettierTSLint = require(\"prettier-tslint\");\n\t}\n\treturn prettierTSLint.format;\n}\n\nlet prettierStylelint: typeof import(\"prettier-stylelint\");\nexport function prettierStylelintFormat(): typeof import(\"prettier-stylelint\").format {\n\tif (!prettierStylelint) {\n\t\tprettierStylelint = require(\"prettier-stylelint\");\n\t}\n\treturn prettierStylelint.format;\n}\n","module.exports = require(\"prettier-eslint\");","module.exports = require(\"prettier-tslint\");","module.exports = require(\"prettier-stylelint\");"],"sourceRoot":""}